#include "Header1_5.h"

void register_a_account()
{
	string username, password;

	cout << "Sign up a username - (username should be a ID Student Number) : ";
	cin >> username;
	cout << "Sign up a password: ";
	cin >> password;

	ofstream f;
	f.open("D:\\" + username + "txt");
	f << username << endl << password;
	f.close();
}

bool check_loggin(string username, string password)
{
	string ckuser, ckpassword;

	ifstream f("D:\\" + username + ".txt");
	getline(f, ckuser);
	getline(f, ckpassword);

	if ((ckuser == username) && (ckpassword == password))
	{
		return true;
	}
	else
	{
		return false;
	}
}

void change_password()
{
	string username, password, ckuser, ckpassword, chpassword, chpassword1;

	cout << "Input username: ";
	cin >> username;
	cout << "Input the old password: ";
	cin >> password;

	ifstream f("D:\\" + username + ".txt");
	getline(f, ckuser);
	getline(f, ckpassword);

	if ((ckuser == username) && (ckpassword == password))
	{
		cout << "Input the password which you want to change: ";
		cin >> chpassword;
		cout << endl << "Input the password which you want to change again!: ";
		cin >> chpassword1;
		if (chpassword == chpassword1)
		{
			ofstream f1;
			f1.open("D:\\" + username + ".txt");
			f1 << username << endl << chpassword;
			f1.close();
		}
	}
	else
	{
		cout << "Wrong username or password. Please try again!";
	}
}

//Kiem tra ten
bool check_name(char* name1, char* name2)
{
	char temp1[20], temp2[20];
	int i = 0, flag = 1;
	strcpy(temp1, name1);
	strcpy(temp2, name2);
	while (temp1[i] != '\0') {
		if (temp1[i] != temp2[i]) {
			flag = 0;
			break;
		}
		i++;
	}
	if (flag == 1)
		return true;
	else
		return false;
}

//Kiểm tra ngày tháng năm sinh
bool check_date_of_birth(string day, string month, string year)
{
	if ((stoi(year) % 4 == 0 && stoi(year) % 100 != 0) || stoi(year) % 400 == 0) // nam nhuan
	{
		if ((stoi(month) == 1 || stoi(month) == 3 || stoi(month) == 5 || stoi(month) == 7 || stoi(month) == 8 || stoi(month) == 10 || stoi(month) == 12) && (stoi(day) > 0 && stoi(day) < 31))
		{
			return true;
		}
		if ((stoi(month) == 4 || stoi(month) == 6 || stoi(month) == 9 || stoi(month) == 11) && (stoi(day) > 0 && stoi(day) < 30))
		{
			return true;
		}
		if (stoi(month) == 2 && (stoi(day) > 0 || stoi(day) < 29))
		{
			return true;
		}
		return false;
	}
	else // khong phai nam nhuan
	{
		if ((stoi(month) == 1 || stoi(month) == 3 || stoi(month) == 5 || stoi(month) == 7 || stoi(month) == 8 || stoi(month) == 10 || stoi(month) == 12) && (stoi(day) > 0 && stoi(day) < 32))
		{
			return true;
		}
		if ((stoi(month) == 4 || stoi(month) == 6 || stoi(month) == 9 || stoi(month) == 11) && (stoi(day) > 0 && stoi(day) < 31))
		{
			return true;
		}
		if (stoi(month) == 2 && (stoi(day) > 0 && stoi(day) < 30))
		{
			return true;
		}
		return false;
	}
}

void Enter_the_name(char*& name)
{
	cin.ignore();
	cout << "Enter the name: ";
	char temp_name[20];
	cin.getline(temp_name, 20, '\n');
	name = new char[strlen(temp_name) + 1];
	strcpy(name, temp_name);
}
//Tạo sinh viên 
Student* info_student()
{

	Student* st = new Student;
	cout << "\tEnter the NO: ";
	cin >> st->no;

	cout << "\tEnter the student ID: ";
	cin >> st->student_id;

	cin.ignore();
	cout << "\tEnter the first name: ";
	getline(cin, st->first_name);

	cout << "\tEnter the last name: ";
	getline(cin, st->last_name);

	cout << "\tEnter the gender: ";
	getline(cin, st->gender);

	do {
		cout << "\tEnter the date of birth:\n";
		cout << "\t\tDay: ";
		getline(cin, st->day_of_birth);
		cout << "\t\tMonth: ";
		getline(cin, st->month_of_birth);
		cout << "\t\tYear: ";
		getline(cin, st->year_of_birth);
		if ((check_date_of_birth(st->day_of_birth, st->month_of_birth, st->year_of_birth) == false))
		{
			cout << "Fault! Please re-enter!";
		}
	} while ((check_date_of_birth(st->day_of_birth, st->month_of_birth, st->year_of_birth) == false));

	cout << "\tEnter the social ID: ";
	getline(cin, st->social_id);
	return st;
}

//Tạo một node sinh viên
Node* create_node(Student* data)
{
	Node* node = new Node;
	if (node == NULL)
	{
		cout << "Cannot allocate!";
		return NULL;
	}
	node->data = data;
	node->next = NULL;

	return node;
}

//Tạo một node lớp
Node_class* create_node_class(Class* data)
{
	Node_class* node_class = new Node_class;
	
	node_class->data = data;
	node_class->next = NULL;

	return node_class;
}

//Tạo một năm học
void create_school_year(School_year*& sy)
{
	sy->head = sy->tail = NULL;

	cout << "Create a school year (2020-2021, for example): \n";
	do
	{
		cout << "\tThe beginning of the school year: ";
		cin >> sy->the_beginning_year;
		cout << "\tThe end of the school year: ";
		cin >> sy->the_end_year;
		if (sy->the_beginning_year < 2000 || sy->the_end_year < 2000 || sy->the_beginning_year == sy->the_end_year)
		{
			cout << "Fault!Please re-enter" << endl;
		}
	} while (sy->the_beginning_year < 2000 || sy->the_end_year < 2000 || sy->the_beginning_year == sy->the_end_year);
}

//Tạo một lớp học
void create_class(School_year*& school,Class*& classes)
{
	classes->head = classes->tail = NULL;

	cin.ignore();
	cout << "Create several classes for 1st year students: ";
	char temp[20];
	cin.getline(temp, 20, '\n');
	classes->class_name = new char[strlen(temp) + 1];
	strcpy(classes->class_name, temp);
}

//Thêm lớp học vào năm học 
void Add_class_to_school_year(School_year*& sy, Class* cl)
{
	Node_class* node_class = create_node_class(cl);
	if (sy->head == NULL)
	{
		sy->head = node_class;
	}
	else {
		Node_class* temp = sy->head;
		while (temp->next != NULL)
		{
			temp = temp->next;
		}
		temp->next = node_class;
	}
}

//Them sinh vien vao lop
void Add_student_to_class(Class*& cl, Student* st)
{
	Node* node = create_node(st);
	if (cl->head == NULL)
	{
		cl->head = node;
	}
	else {
		Node* temp1 = cl->head;
		while (temp1->next != NULL)
		{
			temp1 = temp1->next;
		}
		temp1->next = node;
	}
}

void Input_class(School_year*& sy)
{
	Class* classes = new Class;
	create_class(sy, classes);
	Add_class_to_school_year(sy, classes);
}

//Đọc file csv vào một danh sách
void read_to_file(char* file_name, School_year*& sy, char* name)
{
	ifstream file(file_name);
	Student* st = new Student[10];
	if (!file.is_open())
	{
		cout << "Cannot read file!";
	}
	else
	{
		for(Node_class* temp = sy->head;temp!=NULL;temp=temp->next)
		{
			if (check_name(temp->data->class_name, name)) {
				int i = 0;
				while (file.good())
				{
					getline(file, (st + i)->no, ',');

					getline(file, (st + i)->student_id, ',');


					getline(file, (st + i)->first_name, ',');
					getline(file, (st + i)->last_name, ',');

					getline(file, (st + i)->gender, ',');

					getline(file, (st + i)->day_of_birth, ',');
					getline(file, (st + i)->month_of_birth, ',');
					getline(file, (st + i)->year_of_birth, ',');

					getline(file, (st + i)->social_id, '\n');

					Add_student_to_class(temp->data,(st+i));
					i++;
				}
				cout << "A large number of students have joined the class\n";
			}
		}
	}
	file.close();
}

void Input_student_to_class(School_year*& school)
{
	char* name;
	Enter_the_name(name);
	Node_class* temp = school->head;
	int k = 0;
	while (temp != NULL)
	{
		if (check_name(temp->data->class_name, name))
		{
			k = 1;
			Student* st = info_student();
			Add_student_to_class(temp->data, st);
			cout << "The student has become a part of the class.\n";
		}
		temp = temp->next;
	}
	if (k == 0)
		cout << "Students cannot be added to the class. Classroom does not exist! \n";
}

//Xuất thông tin một sinh viên
void ouput_info_student(Student* st)
{
	cout << "\t\tNO: " << st->no << endl;
	cout << "\t\tStudent ID: " << st->student_id << endl;
	cout << "\t\tThe student name: " << st->first_name << " " << st->last_name << endl;
	cout << "\t\tGender: " << st->gender << endl;
	cout << "\t\tDate of birth: " << st->day_of_birth << "/" << st->month_of_birth << "/" << st->year_of_birth << endl;
	cout << "\t\tSocial ID: " << st->social_id;
}
 
const char* check_order(int n)
{
	if (n == 1)
	{
		return "st";
	}
	else if (n == 2)
	{
		return "nd";
	}
	else if (n == 3)
	{
		return "rd";
	}
	else
	{
		return "th";
	}
}

//xuất thông tin danh sách 1 lớp
void output_info_class(Class* cl)
{
	cout << "\tThe name class: " << cl->class_name;
	Node* temp = cl->head;
	int i = 1;
	while (temp != NULL)
	{
		if (temp->next != NULL)
		{
			const char* ch = check_order(i);
			cout << "\n\t" << i << ch << " student" << endl;
			ouput_info_student(temp->data);
			temp = temp ->next;
			cout << endl;
			i++;
		}
	}
}
	
//In danh sách 1 lớp theo tên, người dùng nhập vào trước đó
void print_info_1_class(School_year* sy , char* name)
{
	int k = 0;
	for (Node_class* temp = sy->head; temp != NULL; temp = temp->next)
	{
		if (check_name(temp->data->class_name, name) == true)
		{
			k = 1;
			cout << "\t\tThe name class: " << temp->data->class_name << endl;
			Node* temp1 = temp->data->head;
			int j = 1;
			while (temp1 != NULL)
			{
				const char* ch = check_order(j);
				cout << "\n\t" << j << ch << " student" << endl;
				ouput_info_student(temp1->data);
				temp1 = temp1->next;
				cout << endl;
				j++;
			}
		}
	}
	if (k == 0)
	{
		cout << "Can not see the list student of class to look for. Classroom does not exist!";
	}
}

void print_all_class(School_year* sy)
{
	int i = 1;
	cout << "--------------------THE INFORMATION CLASS OF THE SCHOOL YEAR--------------------\n";
	cout << "\tTHE BEGINNING YEAR: " << sy->the_beginning_year << endl;
	cout << "\tTHE ENDING YEAR: " << sy->the_end_year << endl<<endl;
	for (Node_class* temp = sy->head; temp != NULL; temp = temp->next)
	{
		cout << "-----------------The class " << i << " -------------------\n";
		cout << "\t\tThe name class: " << temp->data->class_name << endl;
		Node* temp1 = temp->data->head;
		int j = 1;
		while (temp1 != NULL)
		{
				const char* ch = check_order(j);
				cout << "\n\t" << j << ch << " student" << endl;
				ouput_info_student(temp1->data);
				temp1 = temp1->next;
				cout << endl;
				j++;
		}
		i++;
	}
}

void remove_Head(School_year*& sy)
{
	if (sy->head == NULL)
	{
		return;
	}
	else
	{
		Node_class* p = sy->head;
		sy->head = sy->head->next;
		delete p;
	}
}

void remove_Tail(School_year*& sy)
{
	if (sy->head == NULL)
	{
		return;
	}
	if (sy->head->next == NULL)
	{
		remove_Head(sy);
	}
	else
	{
		for (Node_class* k = sy->head; k != NULL; k = k->next)
		{
			if (k->next == sy->tail)
			{
				delete sy->tail;
				k->next = NULL;
				sy->tail = k;
			}
		}
	}

}

bool remove_class(School_year*& sy)
{
	char* name;
	Enter_the_name(name);
	Node_class* temp1 = new Node_class;
	for (Node_class* temp = sy->head; temp != NULL; temp = temp->next)
	{
		if (check_name(temp->data->class_name, name))
		{
			if (temp == sy->head)
			{
				remove_Head(sy);
				return true;
			}
			else if (temp == sy->tail)
			{
				remove_Tail(sy);
				return true;
			}
			else
			{
				temp1->next = temp->next;
				delete temp;
				temp = temp1;	
				return true;
			}
		}
		temp1 = temp;
	}
	return false;
}

void remove_Head(Class*& cl)
{
	if (cl->head == NULL)
	{
		return;
	}
	else
	{
		Node* p = cl->head;
		cl->head = cl->head->next;
		delete p;
	}
}

void remove_Tail(Class*& cl)
{
	if (cl->head == NULL)
	{
		return;
	}
	if (cl->head->next == NULL)
	{
		remove_Head(cl);
	}
	else
	{
		for (Node* k = cl->head; k != NULL; k = k->next)
		{
			if (k->next == cl->tail)
			{
				delete cl->tail;
				k->next = NULL;
				cl->tail = k;
			}
		}
	}

}

bool remove_student(School_year*& sy)
{
	char* name;
	Enter_the_name(name);
	for (Node_class* temp = sy->head; temp != NULL; temp = temp->next)
	{
		if (check_name(temp->data->class_name, name))
		{
			Class* cl = temp->data;
			Node* temp2 = new Node;
			char* firstname;
			cout << "The first name_";
			Enter_the_name(firstname);
			char* lastname;
			cout << "The last name_";
			Enter_the_name(lastname);
			for (Node* temp1 = cl->head; temp1 != NULL; temp1 = temp1->next)
			{
				if (temp1->data->first_name.compare(firstname)==0)
				{
					if (temp1->data->last_name.compare(lastname)==0)
					{
						if (temp1 == cl->head)
						{
							remove_Head(cl);
							return true;
						}
						else if (temp1 == cl->tail)
						{
							remove_Tail(cl);
							return true;
						}
						else
						{
							temp2->next = temp1->next;
							delete temp1;
							temp1 = temp2;
							return true;
						}
					}
				}
				temp2 = temp1;
			}
			return false;
		}
	}

}




